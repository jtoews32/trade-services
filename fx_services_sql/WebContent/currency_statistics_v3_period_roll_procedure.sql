delimiter //
DROP PROCEDURE IF EXISTS ADD_NEW_ACTIVE_RECORD//

CREATE PROCEDURE ADD_NEW_ACTIVE_RECORD ( 
	IN CROSS_CURR_IN VARCHAR(16),
	IN TRADE_SESSION_TO_PROCESS INTEGER
)
BEGIN
	DECLARE done INTEGER DEFAULT 0;
	DECLARE OCCURENCE_REC_COUNT INTEGER;
	DECLARE FREQ_OF_BEHAVIOR INT DEFAULT 0;
	DECLARE UP INT DEFAULT 0;
	DECLARE DOWN INT DEFAULT 0;
	DECLARE ROLL_COUNT INT DEFAULT 1;
	DECLARE LAST_TRADE_SESSION INT DEFAULT 0;
	DECLARE DOLLAR_MOVEMENT INT DEFAULT 0;
	DECLARE TTL_READS INTEGER;
	DECLARE PREVIOUS_PRICE FLOAT;
	DECLARE CURRENT_PRICE FLOAT;
	DECLARE CURR_DOLLAR_UP INTEGER;
	DECLARE PREV_DOLLAR_UP INTEGER;
	DECLARE PRIM_KEY INTEGER;
	DECLARE TRADE_SESSION_ROLL_COUNT_T INTEGER; 
	DECLARE DOLLAR_UP_T INTEGER;
	DECLARE TRADE_SESSION_T INTEGER;
	DECLARE no_more_rows BOOLEAN;
  	DECLARE loop_cntr INT DEFAULT 0;
  	DECLARE num_rows INT DEFAULT 0;
  	
	DECLARE OCCURENCE_CURSOR CURSOR FOR SELECT TRADE_SESSION_ROLL_COUNT, DOLLAR_UP, TRADE_SESSION FROM OCCURENCE WHERE CROSS_NAME = CROSS_CURR_IN;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_rows = TRUE;
	
	SELECT COUNT(*) INTO OCCURENCE_REC_COUNT FROM OCCURENCE WHERE CROSS_NAME = CROSS_CURR_IN;

	SET TTL_READS = (TRADE_SESSION_TO_PROCESS - 1);
	
	SELECT CROSS_VALUE INTO PREVIOUS_PRICE FROM CURRENCY_PRICE WHERE CROSS_NAME = CROSS_CURR_IN AND TRADE_SESSION = (TTL_READS-1);
	SELECT CROSS_VALUE INTO CURRENT_PRICE FROM CURRENCY_PRICE WHERE CROSS_NAME = CROSS_CURR_IN AND TRADE_SESSION = TTL_READS;

	UPDATE OCCURENCE SET PREV_ACTIVE = 0 WHERE CROSS_NAME = CROSS_CURR_IN;
	UPDATE OCCURENCE SET PREV_ACTIVE = 1 WHERE ACTIVE = 1 AND CROSS_NAME = CROSS_CURR_IN;	
	UPDATE OCCURENCE SET ACTIVE = 0 WHERE PREV_ACTIVE = 1 AND CROSS_NAME = CROSS_CURR_IN;	
	
	IF PREVIOUS_PRICE < CURRENT_PRICE THEN
     	SET CURR_DOLLAR_UP = 1;
	ELSE 
 		SET CURR_DOLLAR_UP = 0;
	END IF;

	IF OCCURENCE_REC_COUNT > 0 THEN 
		SELECT DOLLAR_UP INTO PREV_DOLLAR_UP FROM OCCURENCE WHERE PREV_ACTIVE = 1 AND CROSS_NAME = CROSS_CURR_IN;
		
		IF PREV_DOLLAR_UP = CURR_DOLLAR_UP THEN
			SELECT TRADE_SESSION_ROLL_COUNT INTO ROLL_COUNT FROM OCCURENCE WHERE PREV_ACTIVE = 1 AND CROSS_NAME = CROSS_CURR_IN;
			SET ROLL_COUNT = ROLL_COUNT + 1;
		ELSE
			SET ROLL_COUNT = 1;
		END IF;
  
  		OPEN OCCURENCE_CURSOR;
  			SELECT FOUND_ROWS() INTO num_rows;
 		
    		the_loop: LOOP
    			FETCH OCCURENCE_CURSOR INTO TRADE_SESSION_ROLL_COUNT_T, DOLLAR_UP_T, TRADE_SESSION_T;
    			IF no_more_rows THEN
        			CLOSE OCCURENCE_CURSOR;
        			LEAVE the_loop;
    			END IF;
  				
    			IF TRADE_SESSION_ROLL_COUNT_T = ROLL_COUNT AND DOLLAR_UP_T = CURR_DOLLAR_UP THEN  
    				SET FREQ_OF_BEHAVIOR = FREQ_OF_BEHAVIOR + 1;
    				
    				SELECT MAX(TRADE_SESSION) INTO LAST_TRADE_SESSION FROM OCCURENCE WHERE CROSS_NAME = CROSS_CURR_IN;
    				
    				IF LAST_TRADE_SESSION > TRADE_SESSION_T THEN
    					SELECT DOLLAR_UP INTO DOLLAR_MOVEMENT FROM OCCURENCE WHERE TRADE_SESSION = TRADE_SESSION_T + 1 AND CROSS_NAME = CROSS_CURR_IN;
    				
    					IF DOLLAR_MOVEMENT = 1 THEN
    						SET UP = UP + 1;
    					ELSE
    						SET DOWN = DOWN + 1;
    					END IF;    				
    				END IF;
    			END IF;
    		-- count the number of times looped
    		SET loop_cntr = loop_cntr + 1;
  		END LOOP the_loop;
	END IF;

	IF FREQ_OF_BEHAVIOR > 0 THEN
		SET UP = (UP / FREQ_OF_BEHAVIOR) * 100;
		SET DOWN = (DOWN / FREQ_OF_BEHAVIOR) * 100;
	END IF;

	SELECT (COUNT(*) + 1) INTO PRIM_KEY FROM OCCURENCE;

	INSERT INTO OCCURENCE (
		ID, 
		CROSS_NAME, 
		TRADE_SESSION_ROLL_COUNT, 
		FREQUENCY, 
		DOLLAR_UP, 
		HAPPENED, 
		UP_PROB_NEXT, 
		DOWN_PROB_NEXT, 
		ACTIVE, 
		PREV_ACTIVE,
		TRADE_SESSION,
		CROSS_PRICE
	) VALUES (
		PRIM_KEY, 
		CROSS_CURR_IN, 
		ROLL_COUNT, 
		FREQ_OF_BEHAVIOR, 
		CURR_DOLLAR_UP, 
		NOW(), 
		UP, 
		DOWN, 
		1, 
		-1, 
		TTL_READS,
		CURRENT_PRICE
	);
END;
//
delimiter ;